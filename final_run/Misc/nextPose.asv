function nextPose  = fcn(currPose, wayPointPos,simStepSize,speed)

% Set ego vehicle speed
egoSpeed  = speed;

% Declare persistent variables for simulation and retain only non zero
% elements in the array of waypoints 
persistent wayPointIdx wayPointPosInterp headingAnglesInterp numWayPoints
wayPointPos = reshape(wayPointPos(wayPointPos~=0),[],2);

nWPP=wayPointPos(1,:);
currPoint = [currPose.Pose(1,4) currPose.Pose(2,4)];
delXY = nWPP-currPoint;
dist = norm(delXY);

hAngle = atan2d(delXY(2),delXY(1))-90;
nextPose = currPose;
if dist<(egoSpeed*simStepSize)
    nextPose.Pose(1,4) = nWPP(1);
    nextPose.Pose(2,4) = nWPP(2);
    nextPose.Pose(1:3,1:3) = [cosd(hAngle) -sind(hAngle) 0;...
                          sind(hAngle) cosd(hAngle) 0;...
                          0 0 1];
end

% Extract poses for the entire path before simulation begins
if isempty(wayPointIdx)
    
    wayPointIdx = 2;

    % Pre-allocate arrays
    numInputPoints = length(wayPointPos);
    trueTimes = zeros(numInputPoints+1,1);
    headingAngles = zeros(numInputPoints,1);
    wayPointPosInterp = [];
    headingAnglesInterp = [];

    startPoint = [currPose.Pose(1,4) currPose.Pose(2,4)];
    currPoint = startPoint;

    % Loop through all the input points
    for i=1:numInputPoints

        % Calculate distance from the current point to the next point
        nextPoint = wayPointPos(i,1:2);
        delXY = nextPoint-currPoint;
        absDistToNextPoint = norm(delXY);
        
        % Calculate time of arrival at the next wayPoint based on the
        % set constant speed. Alternatively, you can set the timing profile
        % in RoadRunner for waypoints and use those here 
        trueTimes(i+1) = absDistToNextPoint/egoSpeed + trueTimes(i);
        
        % Calculate the heading angle to proceed towards the next waypoint
        headingAngles(i) = atan2d(delXY(2),delXY(1))-90;
        
        % Based on the simulation step size, calculate the time vector
        % between arrival times at previous waypoint and the current waypoint
        tvec = trueTimes(i):simStepSize:trueTimes(i+1);
        
        % Interpolate X and Y positions between the current and next waypoints
        % along the entire time vector. Store them
        interpPosPointsX = interp1(linspace(trueTimes(i),trueTimes(i+1),100),...
                linspace(currPoint(1),nextPoint(1),100),...
                tvec)';
    
        interpPosPointsY = interp1(linspace(trueTimes(i),trueTimes(i+1),100),...
                linspace(currPoint(2),nextPoint(2),100),...
                tvec)';
        
        wayPointPosInterp = [wayPointPosInterp;[interpPosPointsX interpPosPointsY]];

        % Use the constant heading angle towards the next waypoint for all
        % interpolated points between them
        headingAnglesInterp = [headingAnglesInterp;headingAngles(i)*ones(size(interpPosPointsX))];

        currPoint = nextPoint;
    end

    % Get the new total number of waypoints after interpolation
    numWayPoints = length(wayPointPosInterp);
end

% At each time step of the simulation, send the next waypoint position from the
% interpolated waypoint array until ego vehicle arrives at the last waypoint
nextPose = currPose;
nextPose.Pose(1,4) = wayPointPosInterp(wayPointIdx,1);
nextPose.Pose(2,4) = wayPointPosInterp(wayPointIdx,2);

% Convert the heading angle (yaw) to a rotation matrix
nextPose.Pose(1:3,1:3) = [cosd(headingAnglesInterp(wayPointIdx)) -sind(headingAnglesInterp(wayPointIdx)) 0;...
                          sind(headingAnglesInterp(wayPointIdx)) cosd(headingAnglesInterp(wayPointIdx)) 0;...
                          0 0 1];
nextPose.Velocity=[egoSpeed*cosd(headingAnglesInterp(wayPointIdx)) egoSpeed*sind(headingAnglesInterp(wayPointIdx)) 0];
if(wayPointIdx<numWayPoints)
    wayPointIdx = wayPointIdx + 1;
end


end
